回顾:
函数：
函数的参数：普通的参数  可变参数（*args()，**kwargs{}）,关键字参数
def func(a,b=1):
    pass

func(a=10,b=20)

返回值：  return 值

def func():
    return 'abc',19

x = func()  ---> print(x) ----> ('abc',19)


def func():
    result =a+b
    print(result)

x = func()   -----> 没有返回值的话，接收到的值None

函数间调用：

# 定义函数
def a():
    pass

def b():
    a()  # 调用a函数
    .....

# 调用：使用函数
a()
b()

局部和全局:
number = 100   不可变

list1= [1,2,3,4]  可变


def func():
    global number
    name='abc'
    number+=1

    list1.append(6)


# 闭包
# 在函数中提出的概念，
'''
条件：
1. 外部函数中定义了内部函数
2. 外部函数是有返回值
3. 返回的值是：内部函数名
4. 内部函数引用了外部函数的变量

格式:
def 外部函数():
    ...
    def 内部函数():
        ....
    return 内部函数
'''



'''

在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，
并且把里面的函数返回，我们把这种情况叫闭包


修改外部函数的可变类型局部变量可不加nonlocal
修改外部函数的不可变类型局部变量要加 nonlocal


闭包有什么缺点呢？
闭包的缺点1，作用域没有那么直观
闭包的缺点2，因为变量不会被垃圾回收所以有一定的内存占用问题。

闭包作用：1.可以使用同级的作用域
闭包作用：2.读取其他元素的内部变量
闭包作用：3.延长作用域


闭包总结
1.闭包似优化了变量，原来需要类对象完成的工作，闭包也可以完成.
2.由于闭包引用了外部函数的局部变量，则外部函数的局部变量没有及时释放，0消耗内存.
3.闭包的好处，使代码变得简洁，便于阅读代码。
4.闭包是理解装饰器的基础

'''